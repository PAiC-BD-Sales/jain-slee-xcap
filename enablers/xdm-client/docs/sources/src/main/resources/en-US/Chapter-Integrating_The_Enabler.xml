<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Enabler_XDM_Client_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="integrating">

	<title>Integrating the &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; Enabler</title>
	
	<para>This chapter explains how to setup a JAIN SLEE Service Sbb to use the Enabler.</para>

	<para>In short terms, a Service's Sbb will define the Enabler's Sbb as a child, and to achieve that it will need to setup the XML Descriptor, Abstract Class and SbbLocalObject interface.</para>
	
	<important><para>The Service's Sbb will be referred as the Parent Sbb in the following sections.</para></important>
	<important><para>&THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; depends on &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER.SUB; to provide <literal>XCAP Diff</literal> functionality.</para></important>
	<section id="parent_sbb_local_object_interface">
		
		<title>The Parent's SbbLocalObject Interface</title>
		
		<para>The &THIS.PLATFORM; JAIN SLEE &THIS.ENABLER; Enabler Sbb provides asynchronous callbacks to the Parent's Sbb, and that can only be achieved if the Parent's SbbLocalObject extends a specific Java interface, deployed also by the Enabler. The Enabler uses the Parent's SbbLocalObject when a callback to the Parent's Sbb is needed.</para>
		
		<para>The SbbLocalObject which must be used or extended by the Parent's Sbb is named <literal>XDMClientParentSbbLocalObject</literal>, which extends the <literal>org.restcomm.slee.SbbLocalObjectExt</literal> and <literal>XDMClientParent</literal> interfaces, the latter declares the callbacks which must be implemented in the Parent's Sbb Abstract Class:</para>
		
		<programlisting language="Java" role="JAVA"><![CDATA[
package org.restcomm.slee.enabler.xdmc;

public interface XDMClientParent {

	public void getResponse(URI uri, int responseCode, String mimetype,
			String content, String eTag);

	public void putResponse(URI uri, int responseCode, String responseContent,
			String eTag);

	public void deleteResponse(URI uri, int responseCode,
			String responseContent, String eTag);

	public void subscribeFailed(int responseCode,
		XDMClientChildSbbLocalObject sbbLocalObject, String notifier);

	public void resubscribeFailed(int responseCode,
		XDMClientChildSbbLocalObject sbbLocalObject, String notifier);

	public void unsubscribeFailed(int responseCode,
		XDMClientChildSbbLocalObject sbbLocalObject, String notifier);

	public void subscriptionTerminated(XDMClientChildSbbLocalObject sbbLocalObject,
	    String notifier, TerminationReason reason);

	public void subscriptionNotification(XcapDiff xcapDiff, SubscriptionStatus status);

}
		]]>
		</programlisting>
		
		<variablelist>
		
			<varlistentry>
				<term>The <literal>getResponse(URI,int,String,String,String)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler providing the response for an XML resource GET request.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>putResponse(URI,int,String,String)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler providing the response for an XML resource PUT request.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>deleteResponse(URI,int,String,String)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler providing the response for an XML resource DELETE request.</para>
				</listitem>
			</varlistentry>
		
			<varlistentry>
				<term>The <literal>public void subscribeFailed(int responseCode, XDMClientChildSbbLocalObject sbbLocalObject, URI notifier)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler indicating failed attempt to subscribe to <literal>XCAP Diff</literal> event package.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>The <literal>public void resubscribeFailed(int responseCode, XDMClientChildSbbLocalObject sbbLocalObject, URI notifier)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler indicating failed resubscribe attempt.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>The <literal>public void unsubscribeFailed(int responseCode, XDMClientChildSbbLocalObject sbbLocalObject, URI notifier)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler indicating failure to unsubscribe to <literal>XCAP Diff</literal> event package.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>The <literal>public void subscriptionTerminated(XDMClientChildSbbLocalObject sbbLocalObject, URI notifier, TerminationReason reason)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler informing user that subscription has been terminated. This callback can be triggered by various reasons, however in always indicates that server expunged subscription state.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>The <literal>public void subscriptionNotification(XcapDiff xcapDiff,SubscriptionStatus status)</literal> method:</term>
				<listitem>
					<para>Callback from the Enabler indicating change in resource to which enabler subscribed. Initial subscription success will trigger this callback with current state of resources.</para>
				</listitem>
			</varlistentry>
			
		</variablelist>
		
	</section>
	
	<section id="parent_sbb_abstract_class">
		<title>The Parent's Sbb Abstract Class</title>
		<para>The Parent Sbb Abstract Class must implement the callbacks on it's SbbLocalObject, that is, must implement the <literal>XDMClientParent</literal> interface discussed in last section.</para>
		<para>The Enabler's Sbb is a Child Sbb, and JAIN SLEE 1.1 Child Relations requires an abstract method in the Sbb Abstract Class, to retrieve the <literal>org.mobicents.slee.ChildRelationExt</literal> object, which is used to create or access specific Child Sbbs. This method should be:</para>
		<programlisting language="Java" role="JAVA"><![CDATA[
	public abstract ChildRelationExt getXDMClientChildRelation();
		]]>
		</programlisting>
	</section>
	
	<section id="parent_sbb_xml_descriptor">
		<title>The Parent's Sbb XML Descriptor</title>
		<para>The Parent's Sbb must define a reference to the Enabler's Child Sbb, declare which is the method name to get the related ChildRelation object, and also ensure the SbbLocalObject interface is defined correctly.</para>
		<para>A reference to the Enabler's Child Sbb is defined right after the Parent's Sbb Vendor ID element, using the following XML element:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<sbb-ref>
    		<sbb-name>XDMClientChildSbb</sbb-name>
			<sbb-vendor>org.restcomm</sbb-vendor>
			<sbb-version>1.0</sbb-version>
    		<sbb-alias>xdmClientChildSbb</sbb-alias>
    	</sbb-ref>
		]]>
		</programlisting>
		<para>The method name to get the Enabler's ChildRelation object must be defined after the CMP Fields (if any), this XML element links the sbb-alias previously defined with the abstract method declared in the Parent's Sbb Abstract Class:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<get-child-relation-method>                	
        	<sbb-alias-ref>xdmClientChildSbb</sbb-alias-ref>
            <get-child-relation-method-name>getXDMClientChildRelation</get-child-relation-method-name>
            <default-priority>0</default-priority>
        </get-child-relation-method>
		]]>
		</programlisting>
		<para>Finally, after the <literal>sbb-abstract-class</literal> element the Parent's SbbLocalObject interface name is defined:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<sbb-local-interface>
            <sbb-local-interface-name>...</sbb-local-interface-name>
        </sbb-local-interface>
		]]>
		</programlisting>		
                
	</section>
	
	 
		
</chapter>

